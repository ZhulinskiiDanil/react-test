import { Todo } from '@/features/todos/types';import {  createApi,  fetchBaseQuery} from '@reduxjs/toolkit/query/react';type GetTodosProps = void;type AddTodoProps = Pick<Todo, 'title' | 'completed'>;type UpdateTodoProps = Todo;type DeleteTodoProps = Pick<Todo, 'id'>;export const todosApi = createApi({  reducerPath: 'todosAPI',  tagTypes: ['Todos'],  baseQuery: fetchBaseQuery({    baseUrl: 'http://localhost:3000'  }),  endpoints: (builder) => ({    getTodos: builder.query<Todo[], GetTodosProps>({      query: () => '/todos',      transformResponse: (todos: Todo[]) =>        Array.isArray(todos)          ? todos.sort(              (a, b) => parseFloat(a.id) - parseFloat(b.id)            )          : [],      providesTags: ['Todos']    }),    addTodo: builder.mutation<Todo, AddTodoProps>({      query: (todo) => ({        url: '/todos',        method: 'POST',        body: todo      }),      invalidatesTags: ['Todos']    }),    updateTodo: builder.mutation<Todo, UpdateTodoProps>({      query: (todo) => ({        url: `/todos/${todo.id}`,        method: 'PATCH',        body: todo      }),      invalidatesTags: ['Todos']    }),    deleteTodo: builder.mutation<Todo, DeleteTodoProps>({      query: ({ id }) => ({        url: `/todos/${id}`,        method: 'DELETE',        body: id      }),      invalidatesTags: ['Todos']    })  })});